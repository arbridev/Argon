//
//  PersistenceManager.swift
//  Argon
//
//  Created by Armando Brito on 3/11/21.
//

import Foundation
import CouchbaseLiteSwift

final class PersistenceManager {
    
    private var databaseName = "db"
    private var database: Database!
    
    init() {
        setup()
    }
    
    init(databaseName: String) {
        self.databaseName = databaseName
        setup()
    }
    
    private func setup() {
        Database.log.console.level = .error
        
        do {
            database = try Database(name: databaseName)
            debugPrint("db path:", database.path ?? "N/A")
        } catch {
            fatalError("Error opening database")
        }
    }
    
    func removeDatabase() {
        try! database.delete()
    }
    
}

// MARK: - User

extension PersistenceManager {
    
    func add(user: User) {
        let mutableDoc = MutableDocument(id: user.uid)
            .setString("\(User.self)", forKey: "type")
            .setString(user.name, forKey: "name")
            .setString(user.email, forKey: "email")
            .setString(user.profilePic, forKey: "profilePic")
        
        user.posts.forEach { (post) in
            add(post: post, toUserWithUID: user.uid)
        }
        do {
            try database.saveDocument(mutableDoc)
        } catch {
            fatalError("Error saving document")
        }
    }
    
    func getUser(withUID id: String) -> User? {
        guard let doc = database.document(withID: id) else {
            return nil
        }
        
        return User.map(from: doc)
    }
    
    func getUsersCount() -> Int {
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("\(User.self)")))
        
        do {
            let result = try query.execute()
            let count = result.allResults().count
            print("Number of rows :: \(count)")
            return count
        } catch {
            fatalError("Error running the query")
        }
    }
    
    func getUsers() -> [User] {
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("\(User.self)")))
        
        var users = [User]()
        
        do {
            for result in try query.execute() {
                guard let dict = result.dictionary(forKey: databaseName) else {
                    continue
                }
                
                let user = User.map(from: dict)
                users.append(user)
            }
        } catch {
            print(error)
        }
        return users
    }
    
    func update(user: User) {
        if let mutableDoc = database.document(withID: user.uid)?.toMutable() {
            mutableDoc.setString(user.name, forKey: "name")
                .setString(user.email, forKey: "email")
                .setString(user.profilePic, forKey: "profileKey")
            
            do {
                try database.saveDocument(mutableDoc)

                let document = database.document(withID: mutableDoc.id)!
                // Log the document ID (generated by the database)
                print("Document ID :: \(document.id)")
            } catch {
                fatalError("Error updating document")
            }
        }
    }
    
    func remove(userWithUID id: String) {
        guard let document = database.document(withID: id) else {
            return
        }
        
        do {
            try database.deleteDocument(document)
        } catch {
            fatalError("Error removing document")
        }
    }
    
}

// MARK: - Post

extension PersistenceManager {
    
    func add(post: Post, toUserWithUID userID: String) {
        let postPics = MutableArrayObject(data: post.pics)
        let mutableDoc = MutableDocument(id: "\(post.id)")
            .setString("\(Post.self)", forKey: "type")
            .setString(post.date, forKey: "date")
            .setArray(postPics, forKey: "pics")
            .setString(userID, forKey: "userID")
        
        do {
            try database.saveDocument(mutableDoc)
        } catch {
            fatalError("Error saving document")
        }
    }
    
    func getPost(withID id: String) -> Post? {
        guard let doc = database.document(withID: id) else {
            return nil
        }
        
        return Post.map(from: doc)
    }
    
    func getPostsCount() -> Int {
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("\(Post.self)")))
        
        do {
            let result = try query.execute()
            let count = result.allResults().count
            print("Number of rows :: \(count)")
            return count
        } catch {
            fatalError("Error running the query")
        }
    }
    
    func getPosts() -> [Post] {
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("\(Post.self)")))
        
        var posts = [Post]()
        
        do {
            for result in try query.execute() {
                guard let dict = result.dictionary(forKey: databaseName) else {
                    continue
                }
                
                let post = Post.map(from: dict)
                posts.append(post)
            }
        } catch {
            print(error)
        }
        return posts
    }
    
    func getPosts(fromUserWithUID userID: String) -> [Post] {
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("\(Post.self)"))
                    .add(Expression.property("userID").equalTo(Expression.string(userID))))
        
        var posts = [Post]()
        
        do {
            for result in try query.execute() {
                guard let dict = result.dictionary(forKey: databaseName) else {
                    continue
                }
                
                let post = Post.map(from: dict)
                posts.append(post)
            }
        } catch {
            print(error)
        }
        return posts
    }
    
    func update(post: Post) {
        if let mutableDoc = database.document(withID: "\(post.id)")?.toMutable() {
            let postPics = MutableArrayObject(data: post.pics)
            mutableDoc.setString("\(Post.self)", forKey: "type")
                .setString(post.date, forKey: "date")
                .setArray(postPics, forKey: "pics")
            
            do {
                try database.saveDocument(mutableDoc)

                let document = database.document(withID: mutableDoc.id)!
                // Log the document ID (generated by the database)
                print("Document ID :: \(document.id)")
            } catch {
                fatalError("Error updating document")
            }
        }
    }
    
    func remove(postWithID id: String) {
        guard let document = database.document(withID: id) else {
            return
        }
        
        do {
            try database.deleteDocument(document)
        } catch {
            fatalError("Error removing document")
        }
    }
    
}
