//
//  PersistenceManager.swift
//  Argon
//
//  Created by Armando Brito on 3/11/21.
//

import Foundation
import CouchbaseLiteSwift

final class PersistenceManager {
    
    private let database: Database
    
    init() {
        Database.log.console.level = .error
        
        do {
            database = try Database(name: "mydb")
        } catch {
            fatalError("Error opening database")
        }

//        // Update a document.
//        if let mutableDoc = database.document(withID: mutableDoc.id)?.toMutable() {
//            mutableDoc.setString("Swift", forKey: "language")
//            do {
//                try database.saveDocument(mutableDoc)
//
//                let document = database.document(withID: mutableDoc.id)!
//                // Log the document ID (generated by the database)
//                // and properties
//                print("Document ID :: \(document.id)")
//                print("Learning \(document.string(forKey: "language")!)")
//            } catch {
//                fatalError("Error updating document")
//            }
//        }
    }
    
    func add(user: User) {
        let mutableDoc = MutableDocument()
            .setString("\(User.self)", forKey: "type")
            .setString(user.uid, forKey: "uid")
            .setString(user.name, forKey: "name")
            .setString(user.email, forKey: "email")
        
        do {
            try database.saveDocument(mutableDoc)
        } catch {
            fatalError("Error saving document")
        }
    }
    
    func usersCount() -> Int {
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("\(User.self)")))
        
        do {
            let result = try query.execute()
            let count = result.allResults().count
            print("Number of rows :: \(count)")
            return count
        } catch {
            fatalError("Error running the query")
        }
    }
    
}
