//
//  PersistenceManager.swift
//  Argon
//
//  Created by Armando Brito on 3/11/21.
//

import Foundation
import CouchbaseLiteSwift

final class PersistenceManager {
    
    let database: Database
    
    init() {
        Database.log.console.level = .verbose
        
        do {
            database = try Database(name: "mydb")
        } catch {
            fatalError("Error opening database")
        }
        
        // Create a new document (i.e. a record) in the database.
        let mutableDoc = MutableDocument()
            .setFloat(2.0, forKey: "version")
            .setString("SDK", forKey: "type")

        // Save it to the database.
        do {
            try database.saveDocument(mutableDoc)
        } catch {
            fatalError("Error saving document")
        }

        // Update a document.
        if let mutableDoc = database.document(withID: mutableDoc.id)?.toMutable() {
            mutableDoc.setString("Swift", forKey: "language")
            do {
                try database.saveDocument(mutableDoc)

                let document = database.document(withID: mutableDoc.id)!
                // Log the document ID (generated by the database)
                // and properties
                print("Document ID :: \(document.id)")
                print("Learning \(document.string(forKey: "language")!)")
            } catch {
                fatalError("Error updating document")
            }
        }

        // Create a query to fetch documents of type SDK.
        let query = QueryBuilder
            .select(SelectResult.all())
            .from(DataSource.database(database))
            .where(Expression.property("type").equalTo(Expression.string("SDK")))

        // Run the query.
        do {
            let result = try query.execute()
            print("Number of rows :: \(result.allResults().count)")
        } catch {
            fatalError("Error running the query")
        }

//        // Create replicators to push and pull changes to and from the cloud.
//        let targetEndpoint = URLEndpoint(url: URL(string: "ws://localhost:4984/getting-started-db")!)
//        let replConfig = ReplicatorConfiguration(database: database, target: targetEndpoint)
//        replConfig.replicatorType = .pushAndPull
//
//        // Add authentication.
//        replConfig.authenticator = BasicAuthenticator(username: "john", password: "pass")
//
//        // Create replicator (make sure to add an instance or static variable named replicator)
//        self.replicator = Replicator(config: replConfig)
//
//        // Listen to replicator change events.
//        self.replicator.addChangeListener { (change) in
//            if let error = change.status.error as NSError? {
//                print("Error code :: \(error.code)")
//            }
//        }
//
//        // Start replication.
//        self.replicator.start()
    }
    
}
